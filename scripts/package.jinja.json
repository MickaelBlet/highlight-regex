{
	"name": "highlight-regex",
	"displayName": "Highlight - Regex",
	"description": "Highlight (decorate) what you want with Regex",
	"version": "{{version}}",
	"publisher": "mblet",
	"engines": {
		"vscode": "^1.72.0"
	},
	"main": "./extension.js",
	"browser": "./extension.js",
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/MickaelBlet/highlight-regex.git"
	},
	"homepage": "https://github.com/MickaelBlet/highlight-regex/blob/master/README.md",
	"activationEvents": [
		"onStartupFinished"
	],
	"categories": [
		"Visualization"
	],
	"extensionKind": [
		"workspace"
	],
	"icon": "images/icon.drawio.png",
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "highlight-regex-view",
					"title": "Highlight regex",
					"icon": "images/icon.svg"
				}
			]
		},
		"views": {
			"highlight-regex-view": [
				{
					"id": "highlight.regex.view.workspace",
					"name": "Workspace"
				},
				{
					"id": "highlight.regex.view.global",
					"name": "Global"
				},
				{
					"id": "highlight.regex.view.active",
					"name": "Active"
				}
			]
		},
		"menus": {
			"view/title": [
{% for scope in ['global', 'workspace'] %}
				{
					"command": "highlight.regex.{{scope}}.toggleCheckAll",
					"when": "view == highlight.regex.view.{{scope}}",
					"group": "navigation@1"
				},
				{
					"command": "highlight.regex.{{scope}}.addEntry",
					"when": "view == highlight.regex.view.{{scope}}",
					"group": "navigation@2"
				},
				{
					"command": "highlight.regex.{{scope}}.refreshEntries",
					"when": "view == highlight.regex.view.{{scope}}",
					"group": "navigation@3"
				},
				{
					"command": "highlight.regex.{{scope}}.collapseAll",
					"when": "view == highlight.regex.view.{{scope}}",
					"group": "navigation@4"
				}
{% if scope != 'workspace' %}
,
{% endif %}
{% endfor %}
			],
			"view/item/context": [
{% for scope in ['global', 'workspace'] %}
				{
					"command": "highlight.regex.{{scope}}.editEntry",
					"when": "view == highlight.regex.view.{{scope}}",
					"group": "inline@1"
				},
				{
					"command": "highlight.regex.{{scope}}.editEntry",
					"when": "view == highlight.regex.view.{{scope}}",
					"group": "navigation@1"
				},
				{
					"command": "highlight.regex.{{scope}}.deleteEntry",
					"when": "view == highlight.regex.view.{{scope}}",
					"group": "3_navigation@1"
				},
				{
					"command": "highlight.regex.{{scope}}.moveUpEntry",
					"when": "view == highlight.regex.view.{{scope}} && viewItem == parent",
					"group": "inline@2"
				},
				{
					"command": "highlight.regex.{{scope}}.moveUpEntry",
					"when": "view == highlight.regex.view.{{scope}} && viewItem == parent",
					"group": "navigation@2"
				},
				{
					"command": "highlight.regex.{{scope}}.moveDownEntry",
					"when": "view == highlight.regex.view.{{scope}} && viewItem == parent",
					"group": "inline@3"
				},
				{
					"command": "highlight.regex.{{scope}}.moveDownEntry",
					"when": "view == highlight.regex.view.{{scope}} && viewItem == parent",
					"group": "navigation@3"
				}
{% if scope == 'global' %}
				,
				{
					"command": "highlight.regex.{{scope}}.copyToWorkspace",
					"when": "view == highlight.regex.view.{{scope}} && viewItem == parent",
					"group": "2_navigation@1"
				}
{% endif %}
{% if scope == 'workspace' %}
				,
				{
					"command": "highlight.regex.{{scope}}.copyToGlobal",
					"when": "view == highlight.regex.view.{{scope}} && viewItem == parent",
					"group": "2_navigation@1"
				}
{% endif %}
{% if scope != 'workspace' %}
,
{% endif %}
{% endfor %}
			]
		},
		"commands": [
			{
				"command": "highlight.regex.toggle",
				"title": "Highlight Regex: Toggle"
			},
			{
				"command": "highlight.regex.global.toggle",
				"title": "Highlight Regex: Global toggle"
			},
			{
				"command": "highlight.regex.workspace.toggle",
				"title": "Highlight Regex: Workspace toggle"
			},
			{
				"command": "highlight.regex.choose.names",
				"title": "Highlight Regex: Choose by name(s)"
			},
{% for scope in ['global', 'workspace'] %}
			{
				"command": "highlight.regex.{{scope}}.toggleCheckAll",
				"title": "Toggle check all",
				"icon": "$(check-all)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			},
			{
				"command": "highlight.regex.{{scope}}.addEntry",
				"title": "Add",
				"icon": "$(add)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			},
			{
				"command": "highlight.regex.{{scope}}.refreshEntries",
				"title": "Refresh",
				"icon": "$(refresh)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			},
			{
				"command": "highlight.regex.{{scope}}.collapseAll",
				"title": "Collapse All",
				"icon": "$(collapse-all)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			},
			{
				"command": "highlight.regex.{{scope}}.editEntry",
				"title": "Edit",
				"icon": "$(edit)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			},
			{
				"command": "highlight.regex.{{scope}}.deleteEntry",
				"title": "Delete",
				"icon": "$(trash)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			},
			{
				"command": "highlight.regex.{{scope}}.moveUpEntry",
				"title": "Move up",
				"icon": "$(arrow-up)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			},
			{
				"command": "highlight.regex.{{scope}}.moveDownEntry",
				"title": "Move down",
				"icon": "$(arrow-down)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			}
{% if scope == 'global' %}
			,
			{
				"command": "highlight.regex.{{scope}}.copyToWorkspace",
				"title": "Copy to workspace",
				"icon": "$(references)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			}
{% endif %}
{% if scope == 'workspace' %}
			,
			{
				"command": "highlight.regex.{{scope}}.copyToGlobal",
				"title": "Copy to global",
				"icon": "$(references)",
				"enablement": "view == highlight.regex.view.{{scope}}"
			}
{% endif %}
{% if scope != 'workspace' %}
,
{% endif %}
{% endfor %}
		],
		"configuration": {
			"properties": {
				"highlight.regex.cacheLimit": {
					"scope": "resource",
					"type": "integer",
					"description": "Limit of cache",
					"default": 1000
				},
				"highlight.regex.defaultRegexLimit": {
					"scope": "resource",
					"type": "integer",
					"description": "Default limit of search regex",
					"default": 50000
				},
				"highlight.regex.defaultRegexFlag": {
					"scope": "resource",
					"type": "string",
					"description": "Default regex flag",
					"default": "gm"
				},
				"highlight.regex.defaultAddSnippet": {
					"scope": "resource",
					"type": [
						"array",
						"string"
					],
					"description": "Default add snippet",
					"items": {
						"type": "string",
						"title": "line of snippet"
					},
					"default": [
						"{",
						"\t\"name\": \"${1:name}\",",
						"\t\"description\": \"${2:description}\",",
						"\t\"regexes\": [",
						"\t\t{",
						"\t\t\t\"regex\": \"${3:(regex)}\",",
						"\t\t\t\"decorations\": [",
						"\t\t\t\t{",
						"\t\t\t\t\t\"backgroundColor\": \"${4:#000000}\",",
						"\t\t\t\t\t\"color\": \"${5:#ff0000}\"",
						"\t\t\t\t}",
						"\t\t\t]",
						"\t\t}",
						"\t]",
						"}"
					]
				},
				"highlight.regex.delay": {
					"scope": "resource",
					"type": "integer",
					"description": "Delay to applicate decorations after update events (in milliseconds)",
					"default": 200
				},
				"highlight.regex.timeout": {
					"deprecationMessage": "Use \"highlight.regex.delay\" instead"
				},
{% for scope in ['global', 'workspace'] %}
{% if scope == 'global' %}
"highlight.regex.regexes": {
{% elif scope == 'workspace' %}
"highlight.regex.workspace.regexes": {
{% endif %}
{% if scope == 'global' %}
	"default": [
		{
			"name": "TODO/CRITICAL",
			"description": "Show todo and critical keyword on comment(s)",
			"languageRegex": "\\b(c|cpp|go|java|javascript|php|rust|typescript)\\b",
			"regexes": [
				{
					"regex": [
						"/\\*[^]*?\\*/",
						"|",
						"//[^]*?(?:(?<!\\\\)$)"
					],
					"regexFlag": "gm",
					"regexLimit": 25000,
					"regexes": [
						{
							"index": 0,
							"regex": [
								"\\b(TODO)\\b",
								"|",
								"\\b(CRITICAL)\\b"
							],
							"regexFlag": "gmi",
							"regexLimit": 25000,
							"decorations": [
								{
									"index": 1,
									"borderRadius": "4px",
									"fontWeight": "bold",
									"overviewRulerColor": "#FF9900FF",
									"overviewRulerLane": 4,
									"light": {
										"color": "#000000",
										"backgroundColor": "#FF990050",
										"border": "1px solid #FF990090"
									},
									"dark": {
										"color": "#FFFFFF",
										"backgroundColor": "#FF990090",
										"border": "1px solid #FF990050"
									}
								},
								{
									"index": 2,
									"borderRadius": "4px",
									"fontWeight": "bold",
									"overviewRulerColor": "#FF0000FF",
									"overviewRulerLane": 4,
									"light": {
										"color": "#000000",
										"backgroundColor": "#FF000050",
										"border": "1px solid #FF000090"
									},
									"dark": {
										"color": "#FFFFFF",
										"backgroundColor": "#FF000090",
										"border": "1px solid #FF000050"
									}
								}
							]
						}
					]
				}
			]
		}
	],
{% endif %}
	"type": "array",
	"title": "Regexes",
{% if scope == 'workspace' %}
	"scope": "resource",
	"markdownDescription": "Set search regex with decoration for workspace\n\nDecoration at [API docs decoration](https://code.visualstudio.com/api/references/vscode-api#DecorationRenderOptions)",
{% else %}
	"scope": "resource",
	"markdownDescription": "Set search regex with decoration\n\nDecoration at [API docs decoration](https://code.visualstudio.com/api/references/vscode-api#DecorationRenderOptions)",
{% endif %}
	"items": {
		"type": "object",
		"title": "Regexes",
		"additionalProperties": false,
		"properties": {
			"name": {
				"type": "string",
				"title": "name",
				"description": "Name of regex"
			},
			"description": {
				"type": "string",
				"title": "description",
				"description": "Description of regex"
			},
			"active": {
				"type": "boolean",
				"title": "active",
				"description": "Activate this regex"
			},
			"languageIds": {
				"type": "array",
				"title": "languageIds",
				"description": "List of language Id for activated decorations",
				"items": {
					"type": "string",
					"title": "Language",
					"description": "Language Id for activated decorations"
				}
			},
			"languageRegex": {
				"type": "string",
				"title": "languageRegex",
				"markdownDescription": "Regex for activated decorations if match with language Id\n(work if the property languageIds not exists or is empty)\n\nExample: \"\\\\b(c|cpp|go|java|javascript|php|rust|typescript)\\\\b\"",
				"default": ".*"
			},
			"filenameRegex": {
				"type": "string",
				"title": "filenameRegex",
				"description": "Regex for activated decorations if match with filename",
				"default": ".*"
			},
{% for i in range(0, nb_recurse) %}
			"regexes": {
				"type": "array",
				"title": "regexes",
				"description": "List of regex",
				"items": {
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"index": {
							"type": [
								"number",
								"string"
							],
							"title": "Index",
							"description": "Index or name of regex group"
						},
						"regex": {
							"type": [
								"string",
								"array"
							],
							"title": "Regex",
							"description": "Regex string",
							"items": {
								"type": "string",
								"title": "line of regex"
							}
						},
						"regexFlag": {
							"type": "string",
							"title": "RegexFlag",
							"description": "Flag of regex"
						},
						"regexLimit": {
							"type": "number",
							"title": "RegexLimit",
							"description": "Limit of regex"
						},
						"decorations": {
							"type": "array",
							"title": "Decorations",
							"description": "List of decoration",
							"items": {
								"type": "object",
								"title": "decoration",
								"additionalProperties": false,
								"properties": {
									"index": {
										"type": [
											"number",
											"string"
										],
										"title": "index",
										"description": "Index or name of regex group"
									},
									"after": {
										"type": "object",
										"title": "after",
										"description": "Defines the rendering options of the attachment that is inserted after the decorated text.",
										"additionalProperties": false,
										"properties": {
											"backgroundColor": {
												"type": "string",
												"title": "backgroundColor",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"border": {
												"type": "string",
												"title": "border",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"borderColor": {
												"type": "string",
												"title": "borderColor",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"color": {
												"type": "string",
												"title": "color",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"contentIconPath": {
												"type": "string",
												"title": "contentIconPath",
												"description": "An absolute path or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
											},
											"contentText": {
												"type": "string",
												"title": "contentText",
												"description": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
											},
											"fontStyle": {
												"type": "string",
												"title": "fontStyle",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"fontWeight": {
												"type": "string",
												"title": "fontWeight",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"height": {
												"type": "string",
												"title": "height",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"margin": {
												"type": "string",
												"title": "margin",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"textDecoration": {
												"type": "string",
												"title": "textDecoration",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"width": {
												"type": "string",
												"title": "width",
												"description": "CSS styling property that will be applied to the decoration attachment."
											}
										}
									},
									"backgroundColor": {
										"type": "string",
										"title": "backgroundColor",
										"description": "Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations."
									},
									"before": {
										"type": "object",
										"title": "before",
										"description": "Defines the rendering options of the attachment that is inserted after the decorated text.",
										"additionalProperties": false,
										"properties": {
											"backgroundColor": {
												"type": "string",
												"title": "backgroundColor",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"border": {
												"type": "string",
												"title": "border",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"borderColor": {
												"type": "string",
												"title": "borderColor",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"color": {
												"type": "string",
												"title": "color",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"contentIconPath": {
												"type": "string",
												"title": "contentIconPath",
												"description": "An absolute path or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
											},
											"contentText": {
												"type": "string",
												"title": "contentText",
												"description": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
											},
											"fontStyle": {
												"type": "string",
												"title": "fontStyle",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"fontWeight": {
												"type": "string",
												"title": "fontWeight",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"height": {
												"type": "string",
												"title": "height",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"margin": {
												"type": "string",
												"title": "margin",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"textDecoration": {
												"type": "string",
												"title": "textDecoration",
												"description": "CSS styling property that will be applied to the decoration attachment."
											},
											"width": {
												"type": "string",
												"title": "width",
												"description": "CSS styling property that will be applied to the decoration attachment."
											}
										}
									},
									"border": {
										"type": "string",
										"title": "border",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									},
									"borderColor": {
										"type": "string",
										"title": "borderColor",
										"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
									},
									"borderRadius": {
										"type": "string",
										"title": "borderRadius",
										"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
									},
									"borderSpacing": {
										"type": "string",
										"title": "borderSpacing",
										"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
									},
									"borderStyle": {
										"type": "string",
										"title": "borderStyle",
										"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
									},
									"borderWidth": {
										"type": "string",
										"title": "borderWidth",
										"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
									},
									"color": {
										"type": "string",
										"title": "color",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									},
									"cursor": {
										"type": "string",
										"title": "cursor",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									},
									"dark": {
										"type": "object",
										"title": "dark",
										"description": "Overwrite options for dark themes.",
										"additionalProperties": false,
										"properties": {
											"after": {
												"type": "object",
												"title": "after",
												"description": "Defines the rendering options of the attachment that is inserted after the decorated text.",
												"additionalProperties": false,
												"properties": {
													"backgroundColor": {
														"type": "string",
														"title": "backgroundColor",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"border": {
														"type": "string",
														"title": "border",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"borderColor": {
														"type": "string",
														"title": "borderColor",
														"description": "CSS styling property that will be applied to text enclosed by a decoration."
													},
													"color": {
														"type": "string",
														"title": "color",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"contentIconPath": {
														"type": "string",
														"title": "contentIconPath",
														"description": "An absolute path or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
													},
													"contentText": {
														"type": "string",
														"title": "contentText",
														"description": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
													},
													"fontStyle": {
														"type": "string",
														"title": "fontStyle",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"fontWeight": {
														"type": "string",
														"title": "fontWeight",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"height": {
														"type": "string",
														"title": "height",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"margin": {
														"type": "string",
														"title": "margin",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"textDecoration": {
														"type": "string",
														"title": "textDecoration",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"width": {
														"type": "string",
														"title": "width",
														"description": "CSS styling property that will be applied to the decoration attachment."
													}
												}
											},
											"backgroundColor": {
												"type": "string",
												"title": "backgroundColor",
												"description": "Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations."
											},
											"before": {
												"type": "object",
												"title": "before",
												"description": "Defines the rendering options of the attachment that is inserted after the decorated text.",
												"additionalProperties": false,
												"properties": {
													"backgroundColor": {
														"type": "string",
														"title": "backgroundColor",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"border": {
														"type": "string",
														"title": "border",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"borderColor": {
														"type": "string",
														"title": "borderColor",
														"description": "CSS styling property that will be applied to text enclosed by a decoration."
													},
													"color": {
														"type": "string",
														"title": "color",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"contentIconPath": {
														"type": "string",
														"title": "contentIconPath",
														"description": "An absolute path or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
													},
													"contentText": {
														"type": "string",
														"title": "contentText",
														"description": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
													},
													"fontStyle": {
														"type": "string",
														"title": "fontStyle",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"fontWeight": {
														"type": "string",
														"title": "fontWeight",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"height": {
														"type": "string",
														"title": "height",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"margin": {
														"type": "string",
														"title": "margin",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"textDecoration": {
														"type": "string",
														"title": "textDecoration",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"width": {
														"type": "string",
														"title": "width",
														"description": "CSS styling property that will be applied to the decoration attachment."
													}
												}
											},
											"border": {
												"type": "string",
												"title": "border",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"borderColor": {
												"type": "string",
												"title": "borderColor",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"borderRadius": {
												"type": "string",
												"title": "borderRadius",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"borderSpacing": {
												"type": "string",
												"title": "borderSpacing",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"borderStyle": {
												"type": "string",
												"title": "borderStyle",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"borderWidth": {
												"type": "string",
												"title": "borderWidth",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"color": {
												"type": "string",
												"title": "color",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"cursor": {
												"type": "string",
												"title": "cursor",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"fontStyle": {
												"type": "string",
												"title": "fontStyle",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"fontWeight": {
												"type": "string",
												"title": "fontWeight",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"gutterIconPath": {
												"type": "string",
												"title": "gutterIconPath",
												"description": "An absolute path or an URI to an image to be rendered in the gutter."
											},
											"gutterIconSize": {
												"type": "string",
												"title": "gutterIconSize",
												"description": "Specifies the size of the gutter icon. Available values are 'auto', 'contain', 'cover' and any percentage value."
											},
											"isWholeLine": {
												"type": "boolean",
												"title": "isWholeLine",
												"description": "Should the decoration be rendered also on the whitespace after the line text. Defaults to false."
											},
											"letterSpacing": {
												"type": "string",
												"title": "letterSpacing",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"opacity": {
												"type": "string",
												"title": "opacity",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"outline": {
												"type": "string",
												"title": "outline",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"outlineColor": {
												"type": "string",
												"title": "outlineColor",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
											},
											"outlineStyle": {
												"type": "string",
												"title": "outlineStyle",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
											},
											"outlineWidth": {
												"type": "string",
												"title": "outlineWidth",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
											},
											"overviewRulerColor": {
												"type": "string",
												"title": "overviewRulerColor",
												"description": "The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations."
											},
											"overviewRulerLane": {
												"type": "number",
												"title": "overviewRulerLane",
												"description": "The position in the overview ruler where the decoration should be rendered.(Left=1, Center=2, Right=4, Full=7)"
											},
											"rangeBehavior": {
												"type": "number",
												"title": "rangeBehavior",
												"description": "Customize the growing behavior of the decoration when edits occur at the edges of the decoration's range.(OpenOpen=0, ClosedClosed=1, OpenClosed=2, ClosedOpen=3)"
											},
											"textDecoration": {
												"type": "string",
												"title": "textDecoration",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											}
										}
									},
									"fontStyle": {
										"type": "string",
										"title": "fontStyle",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									},
									"fontWeight": {
										"type": "string",
										"title": "fontWeight",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									},
									"gutterIconPath": {
										"type": "string",
										"title": "gutterIconPath",
										"description": "An absolute path or an URI to an image to be rendered in the gutter."
									},
									"gutterIconSize": {
										"type": "string",
										"title": "gutterIconSize",
										"description": "Specifies the size of the gutter icon. Available values are 'auto', 'contain', 'cover' and any percentage value."
									},
									"hoverMessage": {
										"type": [
											"string",
											"array"
										],
										"title": "hoverMessage",
										"description": "A message that should be rendered when hovering over the decoration.",
										"items": {
											"type": "string",
											"title": "line of message"
										}
									},
									"isWholeLine": {
										"type": "boolean",
										"title": "isWholeLine",
										"description": "Should the decoration be rendered also on the whitespace after the line text. Defaults to false."
									},
									"letterSpacing": {
										"type": "string",
										"title": "letterSpacing",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									},
									"light": {
										"type": "object",
										"title": "light",
										"description": "Overwrite options for light themes.",
										"additionalProperties": false,
										"properties": {
											"after": {
												"type": "object",
												"title": "after",
												"description": "Defines the rendering options of the attachment that is inserted after the decorated text.",
												"additionalProperties": false,
												"properties": {
													"backgroundColor": {
														"type": "string",
														"title": "backgroundColor",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"border": {
														"type": "string",
														"title": "border",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"borderColor": {
														"type": "string",
														"title": "borderColor",
														"description": "CSS styling property that will be applied to text enclosed by a decoration."
													},
													"color": {
														"type": "string",
														"title": "color",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"contentIconPath": {
														"type": "string",
														"title": "contentIconPath",
														"description": "An absolute path or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
													},
													"contentText": {
														"type": "string",
														"title": "contentText",
														"description": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
													},
													"fontStyle": {
														"type": "string",
														"title": "fontStyle",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"fontWeight": {
														"type": "string",
														"title": "fontWeight",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"height": {
														"type": "string",
														"title": "height",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"margin": {
														"type": "string",
														"title": "margin",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"textDecoration": {
														"type": "string",
														"title": "textDecoration",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"width": {
														"type": "string",
														"title": "width",
														"description": "CSS styling property that will be applied to the decoration attachment."
													}
												}
											},
											"backgroundColor": {
												"type": "string",
												"title": "backgroundColor",
												"description": "Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations."
											},
											"before": {
												"type": "object",
												"title": "before",
												"description": "Defines the rendering options of the attachment that is inserted after the decorated text.",
												"additionalProperties": false,
												"properties": {
													"backgroundColor": {
														"type": "string",
														"title": "backgroundColor",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"border": {
														"type": "string",
														"title": "border",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"borderColor": {
														"type": "string",
														"title": "borderColor",
														"description": "CSS styling property that will be applied to text enclosed by a decoration."
													},
													"color": {
														"type": "string",
														"title": "color",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"contentIconPath": {
														"type": "string",
														"title": "contentIconPath",
														"description": "An absolute path or an URI to an image to be rendered in the attachment. Either an icon or a text can be shown, but not both."
													},
													"contentText": {
														"type": "string",
														"title": "contentText",
														"description": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both."
													},
													"fontStyle": {
														"type": "string",
														"title": "fontStyle",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"fontWeight": {
														"type": "string",
														"title": "fontWeight",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"height": {
														"type": "string",
														"title": "height",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"margin": {
														"type": "string",
														"title": "margin",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"textDecoration": {
														"type": "string",
														"title": "textDecoration",
														"description": "CSS styling property that will be applied to the decoration attachment."
													},
													"width": {
														"type": "string",
														"title": "width",
														"description": "CSS styling property that will be applied to the decoration attachment."
													}
												}
											},
											"border": {
												"type": "string",
												"title": "border",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"borderColor": {
												"type": "string",
												"title": "borderColor",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"borderRadius": {
												"type": "string",
												"title": "borderRadius",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"borderSpacing": {
												"type": "string",
												"title": "borderSpacing",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"borderStyle": {
												"type": "string",
												"title": "borderStyle",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"borderWidth": {
												"type": "string",
												"title": "borderWidth",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'border' for setting one or more of the individual border properties."
											},
											"color": {
												"type": "string",
												"title": "color",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"cursor": {
												"type": "string",
												"title": "cursor",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"fontStyle": {
												"type": "string",
												"title": "fontStyle",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"fontWeight": {
												"type": "string",
												"title": "fontWeight",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"gutterIconPath": {
												"type": "string",
												"title": "gutterIconPath",
												"description": "An absolute path or an URI to an image to be rendered in the gutter."
											},
											"gutterIconSize": {
												"type": "string",
												"title": "gutterIconSize",
												"description": "Specifies the size of the gutter icon. Available values are 'auto', 'contain', 'cover' and any percentage value."
											},
											"isWholeLine": {
												"type": "boolean",
												"title": "isWholeLine",
												"description": "Should the decoration be rendered also on the whitespace after the line text. Defaults to false."
											},
											"letterSpacing": {
												"type": "string",
												"title": "letterSpacing",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"opacity": {
												"type": "string",
												"title": "opacity",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"outline": {
												"type": "string",
												"title": "outline",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											},
											"outlineColor": {
												"type": "string",
												"title": "outlineColor",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
											},
											"outlineStyle": {
												"type": "string",
												"title": "outlineStyle",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
											},
											"outlineWidth": {
												"type": "string",
												"title": "outlineWidth",
												"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
											},
											"overviewRulerColor": {
												"type": "string",
												"title": "overviewRulerColor",
												"description": "The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations."
											},
											"overviewRulerLane": {
												"type": "number",
												"title": "overviewRulerLane",
												"description": "The position in the overview ruler where the decoration should be rendered.(Left=1, Center=2, Right=4, Full=7)"
											},
											"rangeBehavior": {
												"type": "number",
												"title": "rangeBehavior",
												"description": "Customize the growing behavior of the decoration when edits occur at the edges of the decoration's range.(OpenOpen=0, ClosedClosed=1, OpenClosed=2, ClosedOpen=3)"
											},
											"textDecoration": {
												"type": "string",
												"title": "textDecoration",
												"description": "CSS styling property that will be applied to text enclosed by a decoration."
											}
										}
									},
									"opacity": {
										"type": "string",
										"title": "opacity",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									},
									"outline": {
										"type": "string",
										"title": "outline",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									},
									"outlineColor": {
										"type": "string",
										"title": "outlineColor",
										"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
									},
									"outlineStyle": {
										"type": "string",
										"title": "outlineStyle",
										"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
									},
									"outlineWidth": {
										"type": "string",
										"title": "outlineWidth",
										"description": "CSS styling property that will be applied to text enclosed by a decoration. Better use 'outline' for setting one or more of the individual outline properties."
									},
									"overviewRulerColor": {
										"type": "string",
										"title": "overviewRulerColor",
										"description": "The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations."
									},
									"overviewRulerLane": {
										"type": "number",
										"title": "overviewRulerLane",
										"description": "The position in the overview ruler where the decoration should be rendered.(Left=1, Center=2, Right=4, Full=7)"
									},
									"rangeBehavior": {
										"type": "number",
										"title": "rangeBehavior",
										"description": "Customize the growing behavior of the decoration when edits occur at the edges of the decoration's range.(OpenOpen=0, ClosedClosed=1, OpenClosed=2, ClosedOpen=3)"
									},
									"textDecoration": {
										"type": "string",
										"title": "textDecoration",
										"description": "CSS styling property that will be applied to text enclosed by a decoration."
									}
								}
							}
						}{%- if i < nb_recurse - 1 -%},{%- endif -%}
{% endfor %}
{% for i in range(0, nb_recurse) %}
} } }
{% endfor %}
		}
	}
}
{% if scope != 'workspace' %}
,
{% endif %}
{% endfor %}
			}
		}
	}
}